{ config, pkgs, modulesPath, inputs, outputs, ... }:

let
  # Create a proper environment file for PostgreSQL
  endurain-db-env = pkgs.writeText "endurain-db.env" ''
    POSTGRES_PASSWORD_FILE=${config.sops.secrets.endurain-db-password.path}
  '';
in
{
  imports = [
    # Autogenerated configuration specific to the iso, and not included in repo
    (modulesPath + "/virtualisation/proxmox-lxc.nix")
    ../../secrets
  ];

  extra-services.tailscale.enable = true;

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  # Enable virtualisation for containers
  virtualisation.podman = {
    enable = true;
    dockerCompat = true;
    defaultNetwork.settings.dns_enabled = true;
  };

  # Create necessary directories
  systemd.tmpfiles.rules = [
    "d /var/lib/endurain 0755 root root -"
    "d /var/lib/endurain/postgresql 0755 70 70 -"
    "d /var/lib/endurain/backend/logs 0755 root root -"
    "d /var/lib/endurain/backend/data 0755 root root -"
  ];

  # sops secrets configuration
  sops.secrets."endurian-env" = {
    sopsFile = ../../secrets/secrets.yaml;
    owner = "root";
    group = "root";
    mode = "0400";
  };

  virtualisation.oci-containers = {
    backend = "podman";
    containers = {
      endurain-db = {
        image = "docker.io/postgres:17.5";
        autoStart = true;
        environmentFiles = [
          config.sops.secrets."endurian-env".path
        ];
        volumes = [
          "/var/lib/endurain/postgresql:/var/lib/postgresql/data"
        ];
        extraOptions = [
          "--network=endurain-net"
          "--health-cmd=pg_isready -U endurain"
          "--health-interval=10s"
          "--health-timeout=5s"
          "--health-retries=5"
        ];
      };
      
      endurain = {
        image = "ghcr.io/joaovitoriasilva/endurain:latest";
        autoStart = true;
        dependsOn = [ "endurain-db" ];
        ports = [
          "8080:8080"
        ];
        environmentFiles = [
          config.sops.secrets."endurian-env".path
        ];
        volumes = [
          "/var/lib/endurain/backend/data:/app/backend/data"
          "/var/lib/endurain/backend/logs:/app/backend/logs"
        ];
        extraOptions = [
          "--network=endurain-net"
        ];
      };
    };
  };

  systemd.services.init-endurain-network = {
    description = "Create the network for Endurain";
    after = [ "network.target" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStart = "${pkgs.bash}/bin/bash -c '${pkgs.podman}/bin/podman network inspect endurain-net >/dev/null 2>&1 || ${pkgs.podman}/bin/podman network create endurain-net'";
    };
  };

  systemd.services.podman-endurain-db.after = [ "init-endurain-network.service" ];
  systemd.services.your-app = {
    after = [ "init-endurain-network.service" "postgresql.service" ];
    requires = [ "postgresql.service" ];
  };

  networking.firewall.allowedTCPPorts = [ 8080 ];

  system.stateVersion = "25.05";
}