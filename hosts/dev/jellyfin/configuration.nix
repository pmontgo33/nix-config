{ config, pkgs, modulesPath, inputs, outputs, ... }:
{
  imports = [
    # Autogenerated configuration specific to the iso, and not included in repo
    (modulesPath + "/virtualisation/proxmox-lxc.nix")
    # ../../secrets
  ];

  environment.systemPackages = with pkgs; [
    pkgs.jellyfin
    pkgs.jellyfin-web
    pkgs.jellyfin-ffmpeg
  ];

  extra-services.mount_media.enable = true;

  extra-services.tailscale = {
    enable = true;
    lxc = true;
  };
  
  services.openssh.enable = true;

  services.jellyfin = {
    enable = true;
    package = inputs.nixpkgs-unstable.legacyPackages.${pkgs.system}.jellyfin;
    openFirewall = true;
  };

  # Set the VAAPI driver to use the newer iHD driver
  systemd.services.jellyfin.environment.LIBVA_DRIVER_NAME = "iHD";
  environment.sessionVariables = { LIBVA_DRIVER_NAME = "iHD"; };
  
  # Enable hardware graphics support
  hardware.graphics = {
    enable = true;

    extraPackages = with pkgs; [
      intel-ocl                      # Generic OpenCL support
      intel-media-driver             # VAAPI driver for Broadwell and newer (iHD)
      intel-vaapi-driver             # Legacy VAAPI driver for older CPUs (i965)
      libva-vdpau-driver             # Additional VAAPI support
      intel-compute-runtime          # OpenCL runtime for newer CPUs (13th gen+, but works on 12th)
      intel-compute-runtime-legacy1  # OpenCL runtime for older CPUs (8th gen)
      vpl-gpu-rt                     # Video Processing Library for 11th gen and newer
    ];
  };

  # Enable all firmware (important for GuC firmware on newer Intel CPUs)
  hardware.enableAllFirmware = true;
  

  system.stateVersion = "25.05";
}